# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    - name: Cache
      id: cache-sdl2
      uses: actions/cache@v2.0.0
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ~/sdl2
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-sdl2-with-libpulse
    
    - name: Restore SDL2
      if: steps.cache-sdl2.outputs.cache-hit == 'true'
      run: sudo cp -r ~/sdl2/* /
    
    # Runs a single command using the runners shell
    - name: Install SDL2
      if: steps.cache-sdl2.outputs.cache-hit != 'true'
      run: |
        sudo apt install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev
        mkdir ~/sdl2
        sudo dpkg -L libsdl2-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/sdl2/
        sudo dpkg -L libsdl2-image-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/sdl2/
        sudo dpkg -L libsdl2-ttf-dev | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/sdl2/
        sudo dpkg -L libpulse0 | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/sdl2/


    # Runs a set of commands using the runners shell
    - name: build
      run: mkdir build && cd build && cmake .. && make
